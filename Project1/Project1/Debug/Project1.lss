
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080010a  0080010a  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035a  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
unsigned int buzzerCount;


int main(void)
{
	ADMUX = (1<<6); //sets voltage ref
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA  = 0b11101111; //enable adc, starts conversion, enable interrupt, sets prescalar 128
  ac:	8f ee       	ldi	r24, 0xEF	; 239
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = 0;// sets free running mode
  b2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	DDRB = 0x00;
  b6:	14 b8       	out	0x04, r1	; 4
	DDRB = (1<<1|1<<2|1<<3|1<<4|1<<5); //0b00111110;
  b8:	8e e3       	ldi	r24, 0x3E	; 62
  ba:	84 b9       	out	0x04, r24	; 4
 
	DDRD = 0x00; // set portd to inputs
  bc:	1a b8       	out	0x0a, r1	; 10
	DDRD = (1<<5); //0b00100000, pin 5 is buzzer
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0;		/* Initialize to all off							*/
  c2:	15 b8       	out	0x05, r1	; 5
	PORTD = (1<<3|1<<2); //enable pullup on pin 3 & 2
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	8b b9       	out	0x0b, r24	; 11
	
	timecount0 = 0;		/* Initialise the overflow count. Note its scope	*/
  c8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <timecount0+0x1>
  cc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timecount0>
	TCCR0B = (5<<CS00);	/* Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode	*/
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 61;			/* Not strictly necessary as these are the reset states but it's good	*/
  d4:	8d e3       	ldi	r24, 0x3D	; 61
  d6:	84 bd       	out	0x24, r24	; 36
	/* practice to show what you're doing									*/
	TCNT0 = 0;			/* Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms		*/
  d8:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = (1<<TOIE0);		/* Enable Timer 0 interrupt										*/
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	sei();						/* Global interrupt enable (I=1)								*/
  e0:	78 94       	sei
  e2:	c4 e2       	ldi	r28, 0x24	; 36
  e4:	d1 e0       	ldi	r29, 0x01	; 1
		int total = 0; //avg
		for(int i = 0;i<10;i++) {
			total+=adc_reading[i];
		}
		
		adc_average = total/10; //avg adc reading
  e6:	0a e0       	ldi	r16, 0x0A	; 10
  e8:	10 e0       	ldi	r17, 0x00	; 0
		if(adc_average>led_time_threshold) { //if adc reading is above 3.75V
			delayTime = 40; //period is 1s
  ea:	0f 2e       	mov	r0, r31
  ec:	f8 e2       	ldi	r31, 0x28	; 40
  ee:	ef 2e       	mov	r14, r31
  f0:	f1 2c       	mov	r15, r1
  f2:	f0 2d       	mov	r31, r0
			if(adc_average>blue_led_threshold) { //if adc reading is above 2.5V
				PORTB = PORTB | (1<<5); // blue on
				buzzerDelay = 2; // buzzer at 20Hz
			} else {
				PORTB =  PORTB & ~(1<<5); // blue off
				buzzerDelay = 1; // buzzer at 40Hz
  f4:	aa 24       	eor	r10, r10
  f6:	a3 94       	inc	r10
  f8:	b1 2c       	mov	r11, r1
			PORTB =  PORTB & ~(1<<4); // red off
		} else { //switch 1 low	
			PORTB = PORTB | (1<<4); //red on
			if(adc_average>blue_led_threshold) { //if adc reading is above 2.5V
				PORTB = PORTB | (1<<5); // blue on
				buzzerDelay = 2; // buzzer at 20Hz
  fa:	68 94       	set
  fc:	cc 24       	eor	r12, r12
  fe:	c1 f8       	bld	r12, 1
 100:	d1 2c       	mov	r13, r1
 102:	e0 e1       	ldi	r30, 0x10	; 16
 104:	f1 e0       	ldi	r31, 0x01	; 1
	
	sei();						/* Global interrupt enable (I=1)								*/
	
	
	while(1){ 
		int total = 0; //avg
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
		for(int i = 0;i<10;i++) {
			total+=adc_reading[i];
 10a:	21 91       	ld	r18, Z+
 10c:	31 91       	ld	r19, Z+
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
	sei();						/* Global interrupt enable (I=1)								*/
	
	
	while(1){ 
		int total = 0; //avg
		for(int i = 0;i<10;i++) {
 112:	ec 17       	cp	r30, r28
 114:	fd 07       	cpc	r31, r29
 116:	c9 f7       	brne	.-14     	; 0x10a <main+0x64>
			total+=adc_reading[i];
		}
		
		adc_average = total/10; //avg adc reading
 118:	b8 01       	movw	r22, r16
 11a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__divmodhi4>
 11e:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <adc_average+0x1>
 122:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <adc_average>
		if(adc_average>led_time_threshold) { //if adc reading is above 3.75V
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_time_threshold>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_time_threshold+0x1>
 12e:	86 17       	cp	r24, r22
 130:	97 07       	cpc	r25, r23
 132:	28 f4       	brcc	.+10     	; 0x13e <main+0x98>
			delayTime = 40; //period is 1s
 134:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <delayTime+0x1>
 138:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <delayTime>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <main+0xa0>
			} else { //if less than 3.75
			delayTime = 10; // period is 0.25s
 13e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <delayTime+0x1>
 142:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <delayTime>
		}
		if((PIND & (1<<2)) == (1<<2)) {//switch 1 high
 146:	4a 9b       	sbis	0x09, 2	; 9
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0xa8>
			PORTB =  PORTB & ~(1<<4); // red off
 14a:	2c 98       	cbi	0x05, 4	; 5
 14c:	da cf       	rjmp	.-76     	; 0x102 <main+0x5c>
		} else { //switch 1 low	
			PORTB = PORTB | (1<<4); //red on
 14e:	2c 9a       	sbi	0x05, 4	; 5
			if(adc_average>blue_led_threshold) { //if adc reading is above 2.5V
 150:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <adc_average>
 154:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <adc_average+0x1>
 158:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <blue_led_threshold>
 15c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <blue_led_threshold+0x1>
 160:	82 17       	cp	r24, r18
 162:	93 07       	cpc	r25, r19
 164:	30 f4       	brcc	.+12     	; 0x172 <main+0xcc>
				PORTB = PORTB | (1<<5); // blue on
 166:	2d 9a       	sbi	0x05, 5	; 5
				buzzerDelay = 2; // buzzer at 20Hz
 168:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 16c:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
 170:	c8 cf       	rjmp	.-112    	; 0x102 <main+0x5c>
			} else {
				PORTB =  PORTB & ~(1<<5); // blue off
 172:	2d 98       	cbi	0x05, 5	; 5
				buzzerDelay = 1; // buzzer at 40Hz
 174:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
 178:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 17c:	c2 cf       	rjmp	.-124    	; 0x102 <main+0x5c>

0000017e <__vector_21>:
		}
	}					/* Do nothing loop												*/
}

ISR (ADC_vect)//handles ADC interrupts
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	adccount++;
 194:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 198:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if(adccount <= 9) {
 1a6:	8a 30       	cpi	r24, 0x0A	; 10
 1a8:	91 05       	cpc	r25, r1
 1aa:	60 f4       	brcc	.+24     	; 0x1c4 <__vector_21+0x46>
			adc_reading[adccount] = ADC;   /* ADC is in Free Running Mode - you don't have to set up anything for 
 1ac:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 1b0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	fc 01       	movw	r30, r24
 1ba:	e0 5f       	subi	r30, 0xF0	; 240
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	31 83       	std	Z+1, r19	; 0x01
 1c0:	20 83       	st	Z, r18
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <__vector_21+0x4e>
						    the next conversion */
	} else {
		adccount = 0;
 1c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 1c8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	}
	

}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	TCNT0 = 61;		/*	TCNT0 needs to be set to the start point each time				*/
 1f4:	8d e3       	ldi	r24, 0x3D	; 61
 1f6:	86 bd       	out	0x26, r24	; 38
	++timecount0;			/* count the number of times the interrupt has been reached			*/ 
 1f8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <timecount0>
 1fc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <timecount0+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <timecount0+0x1>
 206:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <timecount0>
	++buzzerCount;
 20a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <buzzerCount>
 20e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <buzzerCount+0x1>
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <buzzerCount+0x1>
 21a:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <buzzerCount>
	if (timecount0 >= delayTime)	/* 5 * 2ms = 10ms									*/
 21e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <delayTime>
 222:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <delayTime+0x1>
 226:	82 17       	cp	r24, r18
 228:	93 07       	cpc	r25, r19
 22a:	e8 f1       	brcs	.+122    	; 0x2a6 <__vector_16+0xc4>
	{	
		PORTB = 0;
 22c:	15 b8       	out	0x05, r1	; 5
		if((PIND & (1<<3)) == (1<<3)) { //if switch 2 is high
 22e:	4b 9b       	sbis	0x09, 3	; 9
 230:	1f c0       	rjmp	.+62     	; 0x270 <__vector_16+0x8e>
			PORTB = 1<<rgb;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	00 90 08 01 	lds	r0, 0x0108	; 0x800108 <rgb>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_16+0x5e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <__vector_16+0x5a>
 244:	85 b9       	out	0x05, r24	; 5
			if(rgb <= 3) {
 246:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rgb>
 24a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rgb+0x1>
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	91 05       	cpc	r25, r1
 252:	30 f4       	brcc	.+12     	; 0x260 <__vector_16+0x7e>
				rgb++;
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rgb+0x1>
 25a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rgb>
 25e:	1f c0       	rjmp	.+62     	; 0x29e <__vector_16+0xbc>
			} else {
				PORTB = 0;
 260:	15 b8       	out	0x05, r1	; 5
				rgb = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rgb+0x1>
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rgb>
 26e:	17 c0       	rjmp	.+46     	; 0x29e <__vector_16+0xbc>
			}
		} else { //switch 2 low
			
			if(rgb<7) {
 270:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rgb>
 274:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rgb+0x1>
 278:	87 30       	cpi	r24, 0x07	; 7
 27a:	91 05       	cpc	r25, r1
 27c:	30 f4       	brcc	.+12     	; 0x28a <__vector_16+0xa8>
				rgb++;
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rgb+0x1>
 284:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rgb>
 288:	04 c0       	rjmp	.+8      	; 0x292 <__vector_16+0xb0>
			} else {
				rgb = 0;
 28a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rgb+0x1>
 28e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rgb>
			}
			PORTB = (PORTB | (rgb<<1));
 292:	95 b1       	in	r25, 0x05	; 5
 294:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rgb>
 298:	88 0f       	add	r24, r24
 29a:	89 2b       	or	r24, r25
 29c:	85 b9       	out	0x05, r24	; 5
		}
		

		timecount0 = 0;		/* Restart the overflow counter					*/	
 29e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <timecount0+0x1>
 2a2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timecount0>
	}
	if (timecount0 >= buzzerDelay)	{
 2a6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <timecount0>
 2aa:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <timecount0+0x1>
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2b6:	28 17       	cp	r18, r24
 2b8:	39 07       	cpc	r19, r25
 2ba:	50 f0       	brcs	.+20     	; 0x2d0 <__vector_16+0xee>
		if((PIND & (1<<2)) == (1<<2)) { //if switch 1 is high
 2bc:	4a 9b       	sbis	0x09, 2	; 9
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <__vector_16+0xe6>
			PORTD = PORTD ^ (1<<5); // flips bit 5 to create sound
 2c0:	9b b1       	in	r25, 0x0b	; 11
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	89 27       	eor	r24, r25
 2c6:	8b b9       	out	0x0b, r24	; 11
		}
		buzzerCount = 0;
 2c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <buzzerCount+0x1>
 2cc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <buzzerCount>
	}
	
}
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__divmodhi4>:
 2e2:	97 fb       	bst	r25, 7
 2e4:	07 2e       	mov	r0, r23
 2e6:	16 f4       	brtc	.+4      	; 0x2ec <__divmodhi4+0xa>
 2e8:	00 94       	com	r0
 2ea:	07 d0       	rcall	.+14     	; 0x2fa <__divmodhi4_neg1>
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	09 d0       	rcall	.+18     	; 0x302 <__divmodhi4_neg2>
 2f0:	0e 94 85 01 	call	0x30a	; 0x30a <__udivmodhi4>
 2f4:	07 fc       	sbrc	r0, 7
 2f6:	05 d0       	rcall	.+10     	; 0x302 <__divmodhi4_neg2>
 2f8:	3e f4       	brtc	.+14     	; 0x308 <__divmodhi4_exit>

000002fa <__divmodhi4_neg1>:
 2fa:	90 95       	com	r25
 2fc:	81 95       	neg	r24
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__divmodhi4_neg2>:
 302:	70 95       	com	r23
 304:	61 95       	neg	r22
 306:	7f 4f       	sbci	r23, 0xFF	; 255

00000308 <__divmodhi4_exit>:
 308:	08 95       	ret

0000030a <__udivmodhi4>:
 30a:	aa 1b       	sub	r26, r26
 30c:	bb 1b       	sub	r27, r27
 30e:	51 e1       	ldi	r21, 0x11	; 17
 310:	07 c0       	rjmp	.+14     	; 0x320 <__udivmodhi4_ep>

00000312 <__udivmodhi4_loop>:
 312:	aa 1f       	adc	r26, r26
 314:	bb 1f       	adc	r27, r27
 316:	a6 17       	cp	r26, r22
 318:	b7 07       	cpc	r27, r23
 31a:	10 f0       	brcs	.+4      	; 0x320 <__udivmodhi4_ep>
 31c:	a6 1b       	sub	r26, r22
 31e:	b7 0b       	sbc	r27, r23

00000320 <__udivmodhi4_ep>:
 320:	88 1f       	adc	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	5a 95       	dec	r21
 326:	a9 f7       	brne	.-22     	; 0x312 <__udivmodhi4_loop>
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
